import React, { createContext, useEffect, useState, useRef } from "react";
import { io } from "socket.io-client";

export const SocketContext = createContext();

const useSocket = () => {
    const socketRef = useRef(null);

    if (!socketRef.current) {
        socketRef.current = io("http://127.0.0.1:5000", {
            transports: ["websocket"], // ◊õ◊ï◊§◊î ◊©◊ô◊û◊ï◊© ◊ë-WebSocket ◊ë◊ú◊ë◊ì
            reconnection: true, // ◊û◊ê◊§◊©◊® ◊ó◊ô◊ë◊ï◊® ◊û◊ó◊ì◊© ◊ê◊ù ◊î◊ó◊ô◊ë◊ï◊® ◊†◊ï◊§◊ú
            reconnectionAttempts: 10, // ◊õ◊û◊î ◊†◊ô◊°◊ô◊ï◊†◊ï◊™ ◊ó◊ô◊ë◊ï◊® ◊û◊ó◊ì◊©
            reconnectionDelay: 3000, // ◊û◊®◊ï◊ï◊ó ◊ñ◊û◊ü ◊ë◊ô◊ü ◊†◊ô◊°◊ô◊ï◊†◊ï◊™ ◊ó◊ô◊ë◊ï◊® ◊û◊ó◊ì◊©
            timeout: 20000, // ◊ñ◊û◊ü ◊û◊ß◊°◊ô◊û◊ú◊ô ◊ú◊ó◊ô◊ë◊ï◊®
        });
    }

    return socketRef.current;
};

const SocketProvider = ({ children }) => {
    const socket = useSocket();
    const [messages, setMessages] = useState([]);

    useEffect(() => {
        socket.on("connect", () => {
            console.log("‚úÖ WebSocket connected!");
        });

        socket.on("server_message", (data) => {
            console.log("üì© Received:", data.message);
            setMessages((prev) => [...prev, data.message]);
        });

        socket.on("disconnect", (reason) => {
            console.log("üîå WebSocket closed! Reason:", reason);
        });

        socket.on("connect_error", (error) => {
            console.error("‚ùå WebSocket connection error:", error);
        });

        return () => {
            console.log("‚ö†Ô∏è Cleanup function running, but socket is persistent.");
        };
    }, []);

    return (
        <SocketContext.Provider value={{ socket, messages }}>
            {children}
        </SocketContext.Provider>
    );
};

export { SocketProvider };
export default useSocket;
